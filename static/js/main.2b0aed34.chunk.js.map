{"version":3,"sources":["components/spinner/spinner.jsx","routes/index.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_bootstrap__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","_ref","children","animation","role","size","variant","className","a","createElement","style","position","top","left","Dashboard","lazy","Promise","all","e","then","bind","About","AboutLeadership","Blogs","BlogDetail","BranchLocator","Header","Footer","ScrollToTop","AppRouter","react_default","Fragment","react_router_dom","react","fallback","spinner","react_router","exact","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b0aed34.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport default ({ children, animation, role, size, variant, className }) => {\r\n    return (\r\n        <div style={{position: 'relative', top: '50%', left: '50%'}}>\r\n        <Spinner\r\n                animation={animation || 'border'}\r\n                role={role}\r\n                size={size}\r\n                variant={variant}\r\n                className={className}\r\n            >\r\n                {children}\r\n            </Spinner>\r\n        </div>\r\n    )\r\n}","import React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Spinner from '../components/spinner/spinner';;\r\nconst Dashboard = lazy(() => import('../pages/dashboard/dashboard'));\r\nconst About = lazy(() => import('../pages/about/about'));\r\nconst AboutLeadership = lazy(() => import('../pages/aboutLeadership/aboutLeadership'));\r\nconst Blogs = lazy(() => import('../pages/blogs/blogs'));\r\nconst BlogDetail = lazy(() => import('../pages/blogDetail/blogDetail'));\r\nconst BranchLocator = lazy(() => import('../pages/branchLocator/branchLocator'));\r\nconst Header = lazy(() => import('../components/header/header'));\r\nconst Footer = lazy(() => import('../components/footer/footer'));\r\nconst ScrollToTop = lazy(() => import('./component/scrollToTop'));\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Router>\r\n                <Suspense fallback={<Spinner />}>\r\n                <ScrollToTop>\r\n                    <Header>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={Dashboard} />\r\n                            <Route exact path=\"/about\" component={About} />\r\n                            <Route exact path=\"/about-leadership\" component={AboutLeadership} />\r\n                            <Route exact path=\"/blogs\" component={Blogs} />\r\n                            <Route exact path=\"/blog-detail/:id\" component={BlogDetail} />\r\n                            <Route exact path=\"/branch-locator\" component={BranchLocator} />\r\n                            <Route exact path=\"*\" >\r\n                                <Redirect to=\"/\" />\r\n                            </Route>\r\n                        </Switch>\r\n                    </Header>\r\n                    <Footer />\r\n                </ScrollToTop>\r\n                </Suspense>\r\n            </Router>\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/index.css';\r\nimport './assets/dev.css';\r\nimport AppRouter from './routes';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<AppRouter />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}